#ifndef C_MATH_PROCESSING_H
#define C_MATH_PROCESSING_H

//****************************************************************************************************
//Класс математической обработки
//****************************************************************************************************

//****************************************************************************************************
//подключаемые библиотеки
//****************************************************************************************************
#include <stdint.h>
#include <stdio.h>
#include <math.h>

//****************************************************************************************************
//макроопределения
//****************************************************************************************************

#define M_PI 3.1415926535897932384626433832795f
#define GRAD_TO_RAD(value) (M_PI/180.0f*value)
#define RAD_TO_GRAD(value) (180.0f*value/M_PI)

//****************************************************************************************************
//константы
//****************************************************************************************************

//****************************************************************************************************
//предварительные объявления
//****************************************************************************************************

//****************************************************************************************************
//Класс математической обработки
//****************************************************************************************************
class CMathProcessing
{
 public:
  //-перечисления---------------------------------------------------------------------------------------
  //-структуры------------------------------------------------------------------------------------------
  static const size_t AXIS_AMOUNT=3;//количество осей 
  struct SValue
  {
   float CurrentAngle[AXIS_AMOUNT];//текущий угол (градусы)
   float ConstAngle[AXIS_AMOUNT];//постоянное смещение угла (градусы)
   float AmplitudeAngle[AXIS_AMOUNT];//амплитуда колебаний угла (градусы)
   float PeriodAngle[AXIS_AMOUNT];//период колебаний угла (секунды)
	 float Temper;//температура (градусы Цельсия)
		
	 bool CurrentAngleEnabled[AXIS_AMOUNT];//есть ли текущий угол
	 bool ConstAngleEnabled[AXIS_AMOUNT];//есть ли постоянное смещение угла
	 bool AmplitudeAngleEnabled[AXIS_AMOUNT];//есть ли амплитуда угла
	 bool PeriodAngleEnabled[AXIS_AMOUNT];//есть ли период колебаний	 
	 bool TemperEnabled;//есть ли температура   
  }; 
  //-константы------------------------------------------------------------------------------------------
 private:
  //-структуры------------------------------------------------------------------------------------------
  struct SChannel
	{
	 float Max;//запомненный максимум
   float Min;//запоменный минимум
   
   float CMax;//текущий максимум
   float CMin;//текущий минимум
		
	 float CTMax;//запомненное время максимума
	 float CTMin;//запомненное время минимума
		
	 float TBeginMax;//время первого горба
   float TEndMax;//время следующего горба
		
	 float TBeginMin;//время первого горба
   float TEndMin;//время следующего горба
		
	 float Period;//период
		
	 bool ChangeCMin;//разрешение на смену минимума
	 bool ChangeCMax;//разрешение на смену максимума
		
   uint8_t CounterMin;//циклы измерения минимума (задается, сколько пропустить)
   uint8_t CounterMax;//циклы измерения максимума (задается, сколько пропустить)
	};
  //-переменные-----------------------------------------------------------------------------------------
  SValue sValue;//текущие результаты измерений
	SChannel sChannel[AXIS_AMOUNT];//параметры канала измерения
	
	size_t Tick;//номер такта
 public:
  //-конструктор----------------------------------------------------------------------------------------
  CMathProcessing(void);
  //-деструктор-----------------------------------------------------------------------------------------
  ~CMathProcessing();
 public:
  //-открытые функции-----------------------------------------------------------------------------------
  void NewData(float dt,int16_t raw_gx,int16_t raw_gy,int16_t raw_gz,int16_t raw_ax,int16_t raw_ay,int16_t raw_az,int16_t raw_temper);//передать новые данные
  SValue GetValue(void);//получить результаты расчетов
 private:
  //-закрытые функции-----------------------------------------------------------------------------------  
  static float ConvertGyro(int16_t raw);//конвертировать показания гироскопа в градусы в секунду
  static float ConvertAcs(int16_t raw);//конвертировать показания акселерометра в м/с^2
  static float ConvertTemper(int16_t raw);//конвертировать показания температуры в градусы Цельсия
  void FindMaxMinOscillation(const float angle,const float static_angle,SChannel &sChannel_Current,size_t tick,float dt);//поиск минимума и максимума колебаний
  void FindMoveParam(size_t tick,float dt);//поиск параметров движения
};

#endif
